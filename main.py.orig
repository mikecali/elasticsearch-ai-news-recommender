"""
Main application orchestrator for News Recommendation Engine
"""

import logging
import argparse
import time
from datetime import datetime
from typing import Dict, Any

from config import Config
from elasticsearch_client import ElasticsearchClient
from rss_crawler import RSSCrawler
from user_profiles import UserProfileManager
from recommendation_engine import NewsRecommendationEngine

# Set up logging
logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class NewsRecommendationApp:
    """Main application orchestrator"""
    
    def __init__(self):
        """Initialize the application"""
        try:
            logger.info("üöÄ Initializing News Recommendation Engine with ML Stack...")
            
            # Initialize components
            self.es_client = ElasticsearchClient()
            self.crawler = RSSCrawler()
            self.user_manager = UserProfileManager(self.es_client)
            self.recommendation_engine = NewsRecommendationEngine(self.es_client, self.user_manager)
            
            logger.info("‚úÖ Application initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Error initializing application: {str(e)}")
            raise
    
    def setup_system(self) -> bool:
        """Setup the complete system with ML vectorization"""
        try:
            logger.info("üîß Setting up News Recommendation System with ML Stack...")
            
            # Step 1: Setup Elasticsearch indices and ingest pipeline
            logger.info("üìã Creating Elasticsearch indices and ML ingest pipeline...")
            if not self.es_client.setup_indices_and_pipeline():
                logger.error("‚ùå Failed to setup Elasticsearch indices and pipeline")
                return False
            
            # Step 2: Create demo users if they don't exist
            existing_users = self.user_manager.get_all_users()
            if len(existing_users) < 3:
                logger.info("üë• Creating demo users...")
                user_ids = self.user_manager.create_demo_users()
                if not user_ids:
                    logger.error("‚ùå Failed to create demo users")
                    return False
                logger.info(f"‚úÖ Created {len(user_ids)} demo users")
            else:
                logger.info(f"‚úÖ Found {len(existing_users)} existing users")
            
            logger.info("‚úÖ System setup completed successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error setting up system: {str(e)}")
            return False
    
    def crawl_and_index_news(self) -> int:
        """Crawl news and index with ML vectorization"""
        try:
            logger.info("üì∞ Starting news crawling and ML indexing...")
            
            # Crawl articles
            articles = self.crawler.crawl_news()
            if not articles:
                logger.warning("‚ö†Ô∏è  No articles crawled")
                return 0
            
            logger.info(f"üìÑ Crawled {len(articles)} articles")
            
            # Index with ML vectorization
            success = self.es_client.index_articles_with_vectorization(articles)
            if success:
                logger.info(f"‚úÖ Successfully indexed {len(articles)} articles with ML vectors")
                return len(articles)
            else:
                logger.error("‚ùå Failed to index articles")
                return 0
                
        except Exception as e:
            logger.error(f"‚ùå Error crawling and indexing news: {str(e)}")
            return 0
    
    def generate_recommendations_for_user(self, user_id: str) -> Dict[str, Any]:
        """Generate recommendations for a specific user"""
        try:
            logger.info(f"üéØ Generating recommendations for user {user_id}")
            
            recommendations = self.recommendation_engine.generate_personalized_recommendations(user_id)
            
            if "error" not in recommendations:
                num_recs = len(recommendations.get("recommendations", []))
                performance = recommendations.get("performance", {})
                logger.info(f"‚úÖ Generated {num_recs} recommendations in {performance.get('total_time', 0):.2f}s")
            
            return recommendations
            
        except Exception as e:
            logger.error(f"‚ùå Error generating recommendations: {str(e)}")
            return {"error": str(e)}
    
    def generate_recommendations_for_all_users(self) -> Dict[str, Any]:
        """Generate recommendations for all users"""
        try:
            logger.info("üéØ Generating recommendations for all users...")
            
            users = self.user_manager.get_all_users()
            all_recommendations = {}
            successful = 0
            
            for user in users:
                user_id = user["user_id"]
                user_name = user.get("name", "Unknown")
                
                try:
                    logger.info(f"Processing user: {user_name}")
                    recommendations = self.recommendation_engine.generate_personalized_recommendations(user_id)
                    all_recommendations[user_id] = recommendations
                    
                    if "error" not in recommendations:
                        successful += 1
                    
                except Exception as e:
                    logger.warning(f"Failed to generate recommendations for {user_name}: {str(e)}")
                    all_recommendations[user_id] = {"error": str(e)}
            
            logger.info(f"‚úÖ Generated recommendations for {successful}/{len(users)} users")
            return all_recommendations
            
        except Exception as e:
            logger.error(f"‚ùå Error generating recommendations for all users: {str(e)}")
            return {}
    
    def simulate_user_activity(self) -> bool:
        """Simulate user reading activity for demo purposes"""
        try:
            logger.info("üé≠ Simulating user reading activity...")
            
            # Get all users
            users = self.user_manager.get_all_users()
            if not users:
                logger.warning("No users found for simulation")
                return False
            
            user_ids = [user["user_id"] for user in users]
            
            # Get recent articles
            try:
                response = self.es_client.client.search(
                    index=Config.NEWS_INDEX,
                    body={
                        "size": 20,
                        "query": {"match_all": {}},
                        "sort": [{"published_date": {"order": "desc"}}]
                    }
                )
                
                articles = [hit["_source"] for hit in response["hits"]["hits"]]
                
                if not articles:
                    logger.warning("No articles found for simulation")
                    return False
                
                # Simulate interactions
                success = self.user_manager.simulate_reading_activity(user_ids, articles)
                
                if success:
                    logger.info("‚úÖ Successfully simulated user reading activity")
                
                return success
                
            except Exception as e:
                logger.warning(f"Error getting articles for simulation: {str(e)}")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå Error simulating user activity: {str(e)}")
            return False
    
    def display_system_status(self) -> None:
        """Display comprehensive system status"""
        try:
            print("\n" + "="*80)
            print("ü§ñ NEWS RECOMMENDATION ENGINE - ML-POWERED SYSTEM STATUS")
            print("="*80)
            
            # Elasticsearch status
            if self.es_client.client.ping():
                print("‚úÖ Elasticsearch: Connected")
            else:
                print("‚ùå Elasticsearch: Disconnected")
                return
            
            # Vectorization stats
            vectorization_stats = self.es_client.get_vectorization_stats()
            total_docs = vectorization_stats.get("total_documents", 0)
            ml_docs = vectorization_stats.get("documents_with_ml_vectors", 0)
            coverage = vectorization_stats.get("vectorization_coverage", 0)
            
            print(f"üìä Articles Index: {total_docs} documents")
            print(f"üß† ML Vectorization: {ml_docs} documents ({coverage:.1f}% coverage)")
            
            # Index status
            indices = [Config.NEWS_INDEX, Config.USER_PROFILE_INDEX]
            for index in indices:
                try:
                    count = self.es_client.client.count(index=index)["count"]
                    print(f"‚úÖ {index}: {count} documents")
                except Exception as e:
                    print(f"‚ùå {index}: Error - {str(e)}")
            
            # Ingest pipeline status
            try:
                pipeline_response = self.es_client.client.ingest.get_pipeline(id=Config.NEWS_INGEST_PIPELINE)
                print(f"‚úÖ ML Ingest Pipeline: {Config.NEWS_INGEST_PIPELINE} active")
            except:
                print(f"‚ùå ML Ingest Pipeline: {Config.NEWS_INGEST_PIPELINE} not found")
            
            # User status
            users = self.user_manager.get_all_users()
            print(f"üë• Active Users: {len(users)} profiles")
            
            # ML Stack status
            print("\nüß† ML Technology Stack:")
            print(f"   - ELSER Semantic Search: {Config.ELSER_INFERENCE_ID}")
            print(f"   - Multilingual Embeddings: {Config.MULTILINGUAL_INFERENCE_ID}")
            print(f"   - Claude AI: {Config.CLAUDE_INFERENCE_ID}")
            print(f"   - Reranking: {Config.RERANK_INFERENCE_ID}")
            
            # RSS Feed status
            try:
                feed_info = self.crawler.get_feed_info()
                print(f"üì° RSS Feed: {feed_info.get('title', 'Unknown')} ({feed_info.get('total_entries', 0)} entries)")
            except:
                print("‚ùå RSS Feed: Not available")
            
            print("="*80)
            
        except Exception as e:
            logger.error(f"‚ùå Error displaying system status: {str(e)}")
    
    def run_demo(self) -> None:
        """Run a complete system demonstration"""
        try:
            print("\nüöÄ Starting News Recommendation Engine ML Demo...")
            
            # Setup system
            print("\nüîß Setting up system...")
            if not self.setup_system():
                print("‚ùå System setup failed")
                return
            
            # Display status
            self.display_system_status()
            
            # Crawl and index news
            print("\nüì∞ Crawling and indexing news with ML vectorization...")
            articles_count = self.crawl_and_index_news()
            if articles_count > 0:
                print(f"‚úÖ Successfully indexed {articles_count} articles with ML vectors")
            else:
                print("‚ö†Ô∏è  No articles were indexed")
            
            # Simulate user activity
            print("\nüé≠ Simulating user reading activity...")
            if self.simulate_user_activity():
                print("‚úÖ User activity simulated successfully")
            else:
                print("‚ö†Ô∏è  User activity simulation had issues")
            
            # Generate recommendations for all users
            print("\nüéØ Generating AI-powered recommendations...")
            all_recommendations = self.generate_recommendations_for_all_users()
            
            # Display sample recommendations
            sample_count = 0
            for user_id, recommendations in all_recommendations.items():
                if sample_count >= 2:  # Show only first 2 users
                    break
                    
                if "error" not in recommendations:
                    self.display_recommendations(recommendations)
                    sample_count += 1
                    print("\n" + "-"*60)
            
            print(f"\n‚úÖ Demo completed successfully!")
            print(f"üåê Web UI available at: http://localhost:5000")
            print(f"üìä Generated recommendations for {len(all_recommendations)} users")
            
        except Exception as e:
            logger.error(f"‚ùå Error running demo: {str(e)}")
            print(f"‚ùå Demo failed: {str(e)}")
    
    def display_recommendations(self, recommendations: Dict[str, Any]) -> None:
        """Display recommendations in a formatted way"""
        try:
            if "error" in recommendations:
                print(f"‚ùå Error: {recommendations['error']}")
                return
            
            user_name = recommendations.get('user_name', 'Unknown')
            user_interests = recommendations.get('user_interests', [])
            recs = recommendations.get('recommendations', [])
            performance = recommendations.get('performance', {})
            
            print(f"\nüéØ AI Recommendations for {user_name}")
            print(f"üë§ Interests: {', '.join(user_interests)}")
            print(f"‚ö° Generated in {performance.get('total_time', 0):.2f}s using {', '.join(performance.get('ml_features_used', []))}")
            print(f"üìù Summary: {recommendations.get('summary', 'No summary')}")
            
            if not recs:
                print("‚ùå No recommendations found")
                return
            
            print(f"\nüì∞ Top {len(recs)} Recommended Articles:")
            for i, article in enumerate(recs, 1):
                print(f"\n{i}. {article.get('title', 'No title')}")
                print(f"   üìÖ Published: {article.get('published_date', 'Unknown')}")
                print(f"   üè∑Ô∏è  Categories: {', '.join(article.get('categories', []))}")
                print(f"   üéØ Relevance: {article.get('claude_relevance', 0.0):.0%}")
                print(f"   üí° Reasoning: {article.get('claude_reasoning', 'ML-based selection')}")
                if article.get('ai_selected'):
                    print(f"   ‚ú® AI Selected by Claude")
                else:
                    print(f"   üîç ML Ranked")
                
        except Exception as e:
            logger.error(f"‚ùå Error displaying recommendations: {str(e)}")
    
    def list_articles(self, limit: int = 10) -> None:
        """List recent articles in the index"""
        try:
            print(f"\nüì∞ Recent Articles (showing {limit}):")
            print("-" * 80)
            
            response = self.es_client.client.search(
                index=Config.NEWS_INDEX,
                body={
                    "size": limit,
                    "query": {"match_all": {}},
                    "sort": [{"published_date": {"order": "desc"}}]
                }
            )
            
            for i, hit in enumerate(response["hits"]["hits"], 1):
                article = hit["_source"]
                ml_inference = article.get("ml", {}).get("inference", {})
                
                print(f"{i:2d}. {article.get('title', 'No title')}")
                print(f"    üìÖ Published: {article.get('published_date', 'Unknown')}")
                print(f"    üè∑Ô∏è  Categories: {article.get('categories', [])}")
                print(f"    üß† ML Vectors: {'‚úÖ' if ml_inference else '‚ùå'}")
                if article.get('description'):
                    print(f"    üìù Description: {article.get('description', '')[:100]}...")
                print()
                
        except Exception as e:
            logger.error(f"‚ùå Error listing articles: {str(e)}")
    
    def list_users(self) -> None:
        """List all users in the system"""
        try:
            print("\nüë• System Users:")
            print("-" * 50)
            
            users = self.user_manager.get_all_users()
            for i, user in enumerate(users, 1):
                print(f"{i}. {user['name']} (ID: {user['user_id'][:8]}...)")
                print(f"   üéØ Interests: {', '.join(user['interests'])}")
                print(f"   üìö Reading History: {len(user.get('reading_history', []))} articles")
                print(f"   üìÖ Created: {user.get('created_at', 'Unknown')[:10]}")
                print()
                
        except Exception as e:
            logger.error(f"‚ùå Error listing users: {str(e)}")
    
    def test_search(self, query: str, user_id: str = None) -> None:
        """Test hybrid search functionality"""
        try:
            print(f"\nüîç Testing ML-powered search for: '{query}'")
            print("-" * 60)
            
            user_interests = []
            if user_id:
                user_preferences = self.user_manager.get_user_preferences(user_id)
                user_interests = user_preferences.get('interests', [])
                print(f"üë§ User interests: {user_interests}")
            
            start_time = time.time()
            articles = self.es_client.hybrid_search(query, user_interests, size=5)
            search_time = time.time() - start_time
            
            print(f"‚ö° Search completed in {search_time:.2f}s")
            
            if articles:
                print(f"üìä Found {len(articles)} articles:")
                for i, article in enumerate(articles, 1):
                    score = article.get('_score', 0)
                    rerank_score = article.get('_rerank_score', 0)
                    print(f"{i}. {article.get('title', 'No title')}")
                    print(f"   üéØ Score: {score:.2f} | Rerank: {rerank_score:.2f}")
                    print(f"   üè∑Ô∏è  Categories: {', '.join(article.get('categories', []))}")
                    print()
            else:
                print("‚ùå No articles found")
                
        except Exception as e:
            logger.error(f"‚ùå Error testing search: {str(e)}")

def main():
    """Main function with enhanced CLI"""
    parser = argparse.ArgumentParser(description="News Recommendation Engine with ML Stack")
    parser.add_argument("--setup", action="store_true", help="Setup the system")
    parser.add_argument("--demo", action="store_true", help="Run complete ML demo")
    parser.add_argument("--crawl", action="store_true", help="Crawl and index news")
    parser.add_argument("--recommend", action="store_true", help="Generate recommendations")
    parser.add_argument("--user-id", help="Specific user ID for recommendations")
    parser.add_argument("--status", action="store_true", help="Show system status")
    parser.add_argument("--users", action="store_true", help="List all users")
    parser.add_argument("--articles", action="store_true", help="List recent articles")
    parser.add_argument("--test-search", help="Test search with a query")
    parser.add_argument("--web", action="store_true", help="Start web UI")
    
    args = parser.parse_args()
    
    try:
        app = NewsRecommendationApp()
        
        if args.setup:
            success = app.setup_system()
            if success:
                print("‚úÖ System setup completed successfully")
            else:
                print("‚ùå System setup failed")
                
        elif args.demo:
            app.run_demo()
            
        elif args.crawl:
            count = app.crawl_and_index_news()
            print(f"‚úÖ Crawled and indexed {count} articles with ML vectors")
            
        elif args.recommend:
            if args.user_id:
                recommendations = app.generate_recommendations_for_user(args.user_id)
                app.display_recommendations(recommendations)
            else:
                all_recommendations = app.generate_recommendations_for_all_users()
                for user_id, recs in all_recommendations.items():
                    app.display_recommendations(recs)
                    print("\n" + "-"*60)
                    
        elif args.status:
            app.display_system_status()
            
        elif args.users:
            app.list_users()
            
        elif args.articles:
            app.list_articles()
            
        elif args.test_search:
            app.test_search(args.test_search, args.user_id)
            
        elif args.web:
            print("üåê Starting web UI...")
            from web_app import app as web_app
            web_app.run(debug=True, host='0.0.0.0', port=5000)
            
        else:
            # Default: run demo
            try:
                app.display_system_status()
                print("\nüí° Tip: Use --demo for full demonstration or --web for web UI")
                print("üí° Available commands: --setup, --demo, --crawl, --recommend, --web")
            except:
                print("‚ö†Ô∏è  System needs setup. Running setup first...")
                if app.setup_system():
                    print("\nüí° Setup complete! Run with --demo or --web to continue")
                
    except Exception as e:
        logger.error(f"‚ùå Application error: {str(e)}")
        print(f"‚ùå Error: {str(e)}")
        print("\nüí° Make sure your Elasticsearch credentials are correct in the .env file")

if __name__ == "__main__":
    main()